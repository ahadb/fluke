{"version":3,"sources":["fluke.min.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","obj","constructor","Fluke","random","Math","showObject","result","prop","hasOwnProperty","prototype","version","alpha_lower","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","alpha_upper","toUpperCase","dollarCurr","euroCurr","russianCurr","britishCurr","kuwaitiCurr","totalTime","start","Date","iterations","floating","min","max","arguments","length","Error","randomNum","character","options","symbols","set","concat","substr","floor","integer","string","s","r","charAt","languages","sLanguages","l","domains","extensions","avatar","lipsum","wordPool","minWords","maxWords","rands","ret","newTxt","substring","capitalize","word","wordList","randInt","data","forenames","surnames","arabicNames","male","female","words","countries","name","code","cities","states","abbreviation","nationality","nationalities","n","arab","forename","surnname","fullname","gender","gArr","country","dollar","finAlgorithm","toFixed","ruble","euro","pound","dinar","nasdaq100","nasdaqList","nasdaq","rawNasdaq","split","console","log","window","document","fluke","apply","undefined"],"mappings":"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AAS,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,MAAO,OAAQ,QAAS,QAAS,QAAS,MAAO,MAAO,OAAQ,OAAQ,QAAS,QAAS,MAAO,MAAO,OAAQ,OAAQ,QAAS,OAAQ,WAAY,OAAQ,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,SAAU,QAAS,MAAO,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAEj0DC,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,OAAQ,OAAQ,QAAS,WAAY,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,QAAS,QAAS,OAAQ,QAAS,QAAS,OAAQ,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,OAAQ,SAAU,KAAM,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,QAAS,SAAU,QAAS,QAAS,QAAS,QAAS,MAAO,MAAO,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,MAAO,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,MAAO,OAAQ,OAAQ,MAAO,MAAO,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,QAAS,MAAO,OAAQ,OAAQ,MAAO,OAAQ,QAAS,MAAO,QAAS,QAAS,SAAU,MAAO,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,MAAO,OAA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","file":"fluke.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\t(function () {\n\t\n\t  // Constructor\n\t  // -----------\n\t  function Fluke() {\n\t    if (!(this instanceof Fluke)) {\n\t      return new Fluke();\n\t    }\n\t\n\t    this.random = function () {\n\t      return Math.random(this);\n\t    };\n\t    return this;\n\t  }\n\t\n\t  Fluke.prototype.version = '0.0.1';\n\t\n\t  function testFluke(test, errorMessage) {\n\t    if (test) {\n\t      throw new Error(errorMessage);\n\t    }\n\t  }\n\t\n\t  // define some constants\n\t  var maxNum = Number.MAX_SAFE_INTEGER;\n\t  var minNum = Number.MIN_SAFE_INTEGER;\n\t  var alpha_lower = 'abcdefghijklymnopqrstuvwxyz';\n\t  var alpha_upper = alpha_lower.toUpperCase();\n\t  var numbers = '01234556789';\n\t  var dollarCurr = '$';\n\t  var euroCurr = '€';\n\t  var russianCurr = '₽';\n\t  var britishCurr = '£';\n\t  var kuwaitiCurr = 'د.ك ';\n\t\n\t  // helper functions\n\t  // @todo: options, defaults\n\t\n\t  (function simpleBenchmarks() {\n\t    var totalTime,\n\t        start = new Date(),\n\t        iterations = 1000;\n\t    while (iterations--) {}\n\t    // totalTime → the number of milliseconds taken\n\t    // to execute the code snippet 1000 times\n\t    totalTime = new Date() - start;\n\t  })();\n\t\n\t  // Fundamentals\n\t  // ------------\n\t\n\t  /**\n\t   *  Return a random Float\n\t   *\n\t   *  @param {number} min number\n\t   *  @param {number} max number\n\t   *  @throws {Error}\n\t   *  @returns {float}\n\t   */\n\t\n\t  Fluke.prototype.floating = function (min, max) {\n\t    if (arguments.length > 0) {\n\t      return this.random() * (max - min) + min;\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==> Boolean\n\t   *  Return a random bool\n\t   *\n\t   *  @param {}\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.boolean = function () {\n\t    var randomNum = Math.random() >= 0.5;\n\t    return randomNum;\n\t  };\n\t\n\t  /** ==> Character\n\t   *  Return a random character\n\t   *\n\t   *  @param {}\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.character = function (options) {\n\t    var symbols = '!@#$%^&*(){}[]';\n\t    var set = alpha_lower.concat(alpha_upper, symbols);\n\t\n\t    return set.substr(Math.floor(this.random() * 62), 1);\n\t  };\n\t\n\t  /** ==> Integer\n\t   *  Return a random integer\n\t   *\n\t   *  @param {min}\n\t   *  @param {max}\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.integer = function (min, max) {\n\t    if (arguments.length > 0) {\n\t      return Math.floor(this.random() * (max - min)) + min;\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==> String\n\t   *  Return a random string\n\t   *\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.string = function (m) {\n\t    var m = m || 9;\n\t    var s = '';\n\t    var r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t    for (var i = 0; i < m; i++) {\n\t      s += r.charAt(Math.floor(Math.random() * r.length));\n\t    }\n\t    return s;\n\t  };\n\t\n\t  // End Fundamentals\n\t  // <----------------\n\t\n\t  // Technology\n\t  // ---------------\n\t\n\t  /** ==> Programming languge\n\t   *  Return a random programming language\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.languages = function () {\n\t\n\t    // array of software languages\n\t    var sLanguages = ['4th Dimension/4D', 'ABAP', 'ABC', 'ActionScript', 'Ada', 'Agilent VEE', 'Algol', 'Alice', 'Angelscript', 'Apex', 'APL', 'AppleScript', 'Arc', 'Arduino', 'ASP', 'AspectJ', 'Assembly', 'ATLAS', 'Augeas', 'AutoHotkey', 'AutoIt', 'AutoLISP', 'Automator', 'Avenue', 'Awk', 'Bash', '(Visual) Basic', 'bc', 'BCPL', 'BETA', 'BlitzMax', 'Boo', 'Bourne Shell', 'Bro', 'C', 'C Shell', 'C#', 'C++', 'C++/CLI', 'C-Omega', 'Caml', 'Ceylon', 'CFML', 'cg', 'Ch', 'CHILL', 'CIL', 'CL (OS/400)', 'Clarion', 'Clean', 'Clipper', 'Clojure', 'CLU', 'COBOL', 'Cobra', 'CoffeeScript', 'ColdFusion', 'COMAL', 'Common Lisp', 'Coq', 'cT', 'Curl', 'D', 'Dart', 'DCL', 'DCPU-16 ASM', 'Delphi/Object Pascal', 'DiBOL', 'Dylan', 'E', 'eC', 'Ecl', 'ECMAScript', 'EGL', 'Eiffel', 'Elixir', 'Emacs Lisp', 'Erlang', 'Etoys', 'Euphoria', 'EXEC', 'F#', 'Factor', 'Falcon', 'Fancy', 'Fantom', 'Felix', 'Forth', 'Fortran', 'Fortress', '(Visual) FoxPro', 'Gambas', 'GNU Octave', 'Go', 'Google AppsScript', 'Gosu', 'Groovy', 'Haskell', 'haXe', 'Heron', 'HPL', 'HyperTalk', 'Icon', 'IDL', 'Inform', 'Informix-4GL', 'INTERCAL', 'Io', 'Ioke', 'J', 'J#', 'JADE', 'Java', 'Java FX Script', 'JavaScript', 'JScript', 'JScript.NET', 'Julia', 'Korn Shell', 'Kotlin', 'LabVIEW', 'Ladder Logic', 'Lasso', 'Limbo', 'Lingo', 'Lisp', 'Logo', 'Logtalk', 'LotusScript', 'LPC', 'Lua', 'Lustre', 'M4', 'MAD', 'Magic', 'Magik', 'Malbolge', 'MANTIS', 'Maple', 'Mathematica', 'MATLAB', 'Max/MSP', 'MAXScript', 'MEL', 'Mercury', 'Mirah', 'Miva', 'ML', 'Monkey', 'Modula-2', 'Modula-3', 'MOO', 'Moto', 'MS-DOS Batch', 'MUMPS', 'NATURAL', 'Nemerle', 'Nimrod', 'NQC', 'NSIS', 'Nu', 'NXT-G', 'Oberon', 'Object Rexx', 'Objective-C', 'Objective-J', 'OCaml', 'Occam', 'ooc', 'Opa', 'OpenCL', 'OpenEdge ABL', 'OPL', 'Oz', 'Paradox', 'Parrot', 'Pascal', 'Perl', 'PHP', 'Pike', 'PILOT', 'PL/I', 'PL/SQL', 'Pliant', 'PostScript', 'POV-Ray', 'PowerBasic', 'PowerScript', 'PowerShell', 'Processing', 'Prolog', 'Puppet', 'Pure Data', 'Python', 'Q', 'R', 'Racket', 'REALBasic', 'REBOL', 'Revolution', 'REXX', 'RPG (OS/400)', 'Ruby', 'Rust', 'S', 'S-PLUS', 'SAS', 'Sather', 'Scala', 'Scheme', 'Scilab', 'Scratch', 'sed', 'Seed7', 'Self', 'Shell', 'SIGNAL', 'Simula', 'Simulink', 'Slate', 'Smalltalk', 'Smarty', 'SPARK', 'SPSS', 'SQR', 'Squeak', 'Squirrel', 'Standard ML', 'Suneido', 'SuperCollider', 'TACL', 'Tcl', 'Tex', 'thinBasic', 'TOM', 'Transact-SQL', 'Turing', 'TypeScript', 'Vala/Genie', 'VBScript', 'Verilog', 'VHDL', 'VimL', 'Visual Basic .NET', 'WebDNA', 'Whitespace', 'X10', 'xBase', 'XBase++', 'Xen', 'XPL', 'XSLT', 'XQuery', 'yacc', 'Yorick', 'Z shell'];\n\t\n\t    var l = sLanguages[Math.floor(this.random() * sLanguages.length)];\n\t    return l;\n\t  };\n\t\n\t  /** ==> Domains\n\t   *  Return random top level domains\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.domains = function () {};\n\t\n\t  /** ==> File Extensions\n\t   *  Return random file extensions\n\t   *  @throws {Error}\n\t   *  @returns {string}\n\t   */\n\t\n\t  Fluke.prototype.extensions = function () {};\n\t\n\t  Fluke.prototype.avatar = function () {};\n\t\n\t  // End Technology\n\t  // <-------------\n\t\n\t  // Text\n\t  // ---------------\n\t\n\t  /** ==> Lorem Ipsum\n\t   *  Return random lorem ipsum\n\t   *  @throws {Error}\n\t   *  @returns {long string}\n\t   */\n\t\n\t  Fluke.prototype.lipsum = function () {\n\t\n\t    var wordPool = ['lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipisicing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua.', 'enim', 'ad', 'minim', 'veniam,', 'quis', 'nostrud', 'exercitation', 'ullamco', 'laboris', 'nisi', 'ut', 'aliquip', 'ex', 'ea', 'commodo', 'consequat.', 'duis', 'aute', 'irure', 'dolor', 'in', 'reprehenderit', 'in', 'voluptate', 'velit', 'esse', 'cillum', 'dolore', 'eu', 'fugiat', 'nulla', 'pariatur.', 'excepteur', 'sint', 'occaecat', 'cupidatat', 'non', 'proident,', 'sunt', 'in', 'culpa', 'qui', 'officia', 'deserunt', 'mollit', 'anim', 'id', 'est', 'laborum.', 'sed', 'ut', 'perspiciatis,', 'unde', 'omnis', 'iste', 'natus', 'error', 'sit', 'voluptatem', 'accusantium', 'doloremque', 'laudantium,', 'totam', 'rem', 'aperiam', 'eaque', 'ipsa,', 'quae', 'ab', 'illo', 'inventore', 'veritatis', 'et', 'quasi', 'architecto', 'beatae', 'vitae', 'dicta', 'sunt,', 'explicabo.', 'nemo', 'enim', 'ipsam', 'voluptatem,', 'quia', 'voluptas', 'sit,', 'aspernatur', 'aut', 'odit', 'aut', 'fugit,', 'sed', 'quia', 'consequuntur', 'magni', 'dolores', 'eos,', 'qui', 'ratione', 'voluptatem', 'sequi', 'nesciunt,', 'neque', 'porro', 'quisquam', 'est,', 'qui', 'dolorem', 'ipsum,', 'quia', 'dolor', 'sit,', 'amet,', 'consectetur,', 'adipisci', 'velit,', 'sed', 'quia', 'non', 'numquam', 'eius', 'modi', 'tempora', 'incidunt,', 'ut', 'labore', 'et', 'dolore', 'magnam', 'aliquam', 'quaerat', 'voluptatem.', 'ut', 'enim', 'ad', 'minima', 'veniam,', 'quis', 'nostrum', 'exercitationem', 'ullam', 'corporis', 'suscipit', 'laboriosam,', 'nisi', 'ut', 'aliquid', 'ex', 'ea', 'commodi', 'consequatur?', 'quis', 'autem', 'vel', 'eum', 'iure', 'reprehenderit,', 'qui', 'in', 'ea', 'voluptate', 'velit', 'esse,', 'quam', 'nihil', 'molestiae', 'consequatur,', 'vel', 'illum,', 'qui', 'dolorem', 'eum', 'fugiat,', 'quo', 'voluptas', 'nulla', 'pariatur?', 'at', 'vero', 'eos', 'et', 'accusamus', 'et', 'iusto', 'odio', 'dignissimos', 'ducimus,', 'qui', 'blanditiis', 'praesentium', 'voluptatum', 'deleniti', 'atque', 'corrupti,', 'quos', 'dolores', 'et', 'quas', 'molestias', 'excepturi', 'sint,', 'obcaecati', 'cupiditate', 'non', 'provident,', 'similique', 'sunt', 'in', 'culpa,', 'qui', 'officia', 'deserunt', 'mollitia', 'animi,', 'id', 'est', 'laborum', 'et', 'dolorum', 'fuga.', 'harum', 'quidem', 'rerum', 'facilis', 'est', 'et', 'expedita', 'distinctio.', 'Nam', 'libero', 'tempore,', 'cum', 'soluta', 'nobis', 'est', 'eligendi', 'optio,', 'cumque', 'nihil', 'impedit,', 'quo', 'minus', 'id,', 'quod', 'maxime', 'placeat,', 'facere', 'possimus,', 'omnis', 'voluptas', 'assumenda', 'est,', 'omnis', 'dolor', 'repellendus.', 'temporibus', 'autem', 'quibusdam', 'aut', 'officiis', 'debitis', 'aut', 'rerum', 'necessitatibus', 'saepe', 'eveniet,', 'ut', 'et', 'voluptates', 'repudiandae', 'sint', 'molestiae', 'non', 'recusandae.', 'itaque', 'earum', 'rerum', 'hic', 'tenetur', 'a', 'sapiente', 'delectus,', 'aut', 'reiciendis', 'voluptatibus', 'maiores', 'alias', 'consequatur', 'aut', 'perferendis', 'doloribus', 'asperiores', 'repellat'];\n\t\n\t    var minWords = 15;\n\t    var maxWords = 100;\n\t\n\t    var rands = Math.floor(this.random() * (maxWords - minWords)) + minWords;\n\t\n\t    var ret = '';\n\t\n\t    for (i = 0; i < rands; i++) {\n\t      var newTxt = wordPool[Math.floor(Math.random() * (wordPool.length - 1))];\n\t      if (ret.substring(ret.length - 1, ret.length) == '.' || ret.substring(ret.length - 1, ret.length) == '?') {\n\t        newTxt = newTxt.substring(0, 0).toUpperCase() + newTxt.substring(1, newTxt.length);\n\t      }\n\t      ret += '' + newTxt;\n\t    }\n\t\n\t    return ret.substring(0, ret.length - 1);\n\t  };\n\t\n\t  /** ==> Capitalized Word\n\t   *  Return a word capitalized\n\t   *  @param {string}\n\t   *  @throws {Error}\n\t   *  @returns {String}\n\t   */\n\t\n\t  Fluke.prototype.capitalize = function (word) {\n\t    return word.charAt(0).toUpperCase() + word.substr(1);\n\t  };\n\t\n\t  /** ==> Word\n\t   *  Return a word\n\t   *  @param {string}\n\t   *  @throws {Error}\n\t   *  @returns {String}\n\t   */\n\t\n\t  Fluke.prototype.word = function () {\n\t    var wordList = ['turn', 'twelve', 'twenty', 'twice', 'two', 'type', 'typical', 'uncle', 'under', 'underline', 'understanding', 'unhappy', 'union', 'unit', 'universe', 'unknown', 'unless', 'until', 'unusual', 'up', 'upon', 'upper', 'upward', 'us', 'use', 'useful', 'using', 'usual', 'usually', 'valley', 'valuable', 'value', 'vapor', 'variety', 'various', 'vast', 'vegetable', 'verb', 'vertical', 'very', 'vessels', 'victory', 'view', 'village', 'visit', 'visitor', 'voice', 'volume', 'vote', 'vowel', 'voyage', 'wagon', 'wait', 'walk', 'wall', 'want', 'war', 'warm', 'warn', 'was', 'wash', 'waste', 'watch', 'water', 'wave', 'way', 'we', 'weak', 'wealth', 'wear', 'weather', 'week', 'weigh', 'weight', 'welcome', 'well', 'went', 'were', 'west', 'western', 'wet', 'whale', 'what', 'whatever', 'wheat', 'wheel', 'when', 'whenever', 'where', 'wherever', 'whether', 'which', 'while', 'whispered', 'whistle', 'white', 'who', 'whole', 'whom', 'whose', 'why', 'wide', 'widely', 'wife', 'wild', 'will', 'willing', 'win', 'wind', 'window', 'wing', 'winter', 'wire', 'wise', 'wish', 'with', 'within', 'without', 'wolf', 'women', 'won', 'wonder', 'wonderful', 'wood', 'wooden', 'wool', 'word', 'wore', 'work', 'worker', 'world', 'worried', 'worry', 'worse', 'worth', 'would', 'wrapped', 'write', 'writer', 'writing', 'written', 'wrong', 'wrote', 'yard', 'year', 'yellow', 'yes', 'yesterday', 'yet', 'you', 'young', 'younger', 'your', 'yourself', 'youth', 'zero', 'zoo'];\n\t\n\t    function word() {\n\t      return wordList[randInt(wordList.length)];\n\t    }\n\t\n\t    function randInt() {\n\t      return Math.floor(Math.random() * 62);\n\t    }\n\t\n\t    // No arguments = generate one word\n\t    if (typeof options === 'undefined') {\n\t      return word();\n\t    }\n\t  };\n\t\n\t  // End Text\n\t  // <---------------\n\t\n\t  // dataset, @todo: complete data set so fluke can randomize stuff\n\t  var data = {\n\t    forenames: {},\n\t\n\t    surnames: {},\n\t\n\t    arabicNames: {\n\t      male: ['أبي', 'أحمد', 'أحنف', 'أزهر', 'أسامة', 'أسد', 'أسمر', 'أشرف', 'أكرم', 'الأخضر', 'المثنى', 'النعمان', 'الوليد', 'إمام', 'آمر', 'أمية', 'أمين', 'أنصاري', 'أنور', 'أوس', 'إياد', 'إيثار', 'أيسر', 'أيمن', 'إيناس', 'إيهاب', 'بادي', 'باسل', 'باشر', 'باهر', 'بجاد', 'بدر', 'بدري', 'بدوي', 'براء', 'براق', 'براك', 'برعم', 'برهان', 'برهوم', 'برئ', 'بسام', 'بسطام', 'بسيم', 'بشامة', 'بشير', 'بطل', 'بكر', 'بكري', 'بلال', 'بلبل', 'بنداري', 'بندر', 'بهاء', 'تامر', 'تركي', 'تمام', 'تيجاني', 'تيسير', 'ثنيان', 'ثواب', 'جاسر', 'جاسم', 'جاهد', 'جبير', 'جحا', 'جعيفر', 'جعيل', 'جلال', 'جليل', 'جمال', 'جمعة', 'جندل', 'جواد', 'جوهري', 'حاتم', 'حبشي', 'حبيب', 'حجاج', 'حجازي', 'حجي', 'حداد', 'حذيفه', 'حسام', 'حسان', 'حسنين', 'حسون', 'حسيب', 'حسين', 'حفيظ', 'حلمي', 'حماد', 'حمادة', 'حمدان', 'حمدي', 'حمزة', 'حمود', 'حمودة', 'حميدو', 'حنبل', 'حنظلة', 'حنفي', 'حيدر', 'حيدرة', 'خازم', 'خالد', 'خطاب', 'خلدون', 'خميس', 'خويلد', 'خيري', 'داوود', 'دريد', 'رابح', 'راشد', 'ربيع', 'رجاء', 'رسول', 'رشدي', 'رضا', 'رضوان', 'رمضان', 'رياض', 'زاهد', 'زايد', 'زهران', 'زياد', 'ساري', 'سالم', 'سامر', 'سامي', 'سرحان', 'سعد', 'سلطان', 'سمير', 'سهيل', 'شادي', 'شكيب', 'شهاب', 'صابر', 'صفوان', 'صلاح', 'صياح', 'ضاحي', 'ضرغام', 'طارق', 'طلال', 'طه', 'عادل', 'عامر', 'عايد', 'عبد الإله', 'عبد الحميد', 'عبد الرحمن', 'عبد الله', 'عبد المعين', 'عبيدة', 'عثمان', 'عدنان', 'عروة', 'عزيز', 'علاء', 'علي', 'عمار', 'غازي', 'غسان', 'غياث', 'فادي', 'فاروق', 'فراس', 'فهد', 'فواز', 'قتادة', 'قتيبة', 'قحطان', 'قصي', 'قيس', 'كايد', 'كمال', 'كنعان', 'لقمان', 'لؤي', 'ليث', 'ماجد', 'مازن', 'مأمون', 'محمد', 'محمد نور', 'مرهف', 'مسعود', 'مشاري', 'مشعل', 'مصطفى', 'مصعب', 'مطلق', 'معاذ', 'معاوية', 'معتصم', 'معز', 'ممدوح', 'مناف', 'مهند', 'مؤيد', 'ناصر', 'نايف', 'نديم', 'نذير', 'نزار', 'نعمان', 'نواف', 'نوفل', 'هاني', 'هزاع', 'هشام', 'هلال', 'هواش', 'هيثم', 'وائل', 'وسام', 'وضاح', 'وليد', 'ياسر', 'يامن'],\n\t\n\t      female: ['ابتسام', 'إبتهال', 'أبية', 'أرجوان', 'أرواح', 'أريج', 'أريحا', 'إسراء', 'أسرار', 'إسعاد', 'أسلية', 'إسمهان', 'أسمى', 'أسوة', 'أسيل', 'أسيمة', 'أمة الله', 'إشراق', 'إشفاق', 'أشواق', 'أصالة', 'أصيلة', 'إفتكار', 'أفراح', 'أفكار', 'أفنان', 'ألحان', 'ألطاف', 'إلهام', 'أليفة', 'آمال', 'أماني', 'آمنة', 'أمنية', 'أميرة', 'أمينة', 'إناس', 'إنتصار', 'انجي', 'إنصاف', 'إنعام', 'أنيسة', 'آيات', 'إيناس', 'بارعة', 'بتلاء', 'بدوية', 'بديعة', 'براءة', 'براح', 'براعم', 'برلنتي', 'بريكة', 'بريهان', 'بريئة', 'بشرى', 'بصيرة', 'بلبلة', 'بنان', 'بنانة', 'بنفسج', 'بهية', 'بهيجة', 'بوران', 'بيان', 'بيداء', 'بيسان', 'بيضاء', 'بينة', 'تحفة', 'تحية', 'تذكار', 'تراث', 'تركية', 'تسامح', 'تسبيح', 'تسنيم', 'تقاء', 'تقوى', 'تلال', 'تماضر', 'تهامة', 'تهاني', 'تهنيد', 'توحيدة', 'تودد', 'توسل', 'توفيقة', 'تي', 'تيجان', 'تيماء', 'ثابتة', 'ثائرة', 'ثراء', 'ثناء', 'جلاء', 'جمانة', 'جميلة', 'جهام', 'جهراء', 'جورية', 'جويرية', 'جيهان', 'حاكمة', 'حبيبة', 'حسناء', 'حصة', 'حلا', 'حميدة', 'حنان', 'حوراء', 'حياة', 'خاتون', 'ختام', 'خديجة', 'خلود', 'خواطر', 'خولة', 'خيرية', 'دانة', 'دانية', 'درية', 'دعاء', 'دعد', 'دلال', 'ديمة', 'ذكرى', 'راغدة', 'رامه', 'رامية', 'رانية', 'راوية', 'ربى', 'رحاب', 'رزان', 'رشا', 'رضوى', 'رفيف', 'رقية', 'رمزية', 'رهام', 'رهف', 'روضة', 'روعة', 'رؤى', 'ريم', 'ريما', 'زكية', 'زمردة', 'زينب', 'سارة', 'سالي', 'سحر', 'سلوى', 'سماهر', 'سمر', 'سمية', 'سناء', 'سهى', 'سهير', 'شادية', 'شذى', 'شمائل', 'شيماء', 'صابرين', 'صبا', 'عاتكة', 'عبلة', 'عبير', 'عزة', 'عصمت', 'عفاف', 'علا', 'عنود', 'غادة', 'غزل', 'غيداء', 'فاتن', 'فاطمة', 'فتحية', 'فدوى', 'فريال', 'فهمية', 'فوزية', 'فيحاء', 'كوثر', 'لبنى', 'لمى', 'لؤلؤة', 'ليلى', 'ماجدة', 'محاسن', 'مرام', 'مرح', 'مروة', 'مريم', 'مزنة', 'مسرة', 'منال', 'منى', 'منيرة', 'مها', 'مي', 'ميادة', 'ميساء', 'ميسون', 'نابغة', 'نادية', 'نبيلة', 'نجود', 'ندى', 'نرمين', 'نشوى', 'نغم', 'نهى', 'نوال', 'نورا', 'نوفة', 'هالة', 'هبة', 'هدى', 'هديل', 'هلا', 'هنادي', 'هند', 'هيفاء', 'وداد', 'وعد', 'ولاء', 'يمنى']\n\t\n\t    },\n\t\n\t    words: {},\n\t\n\t    countries: [{ name: 'Afghanistan', code: 'AF' }, { name: 'Åland Islands', code: 'AX' }, { name: 'Albania', code: 'AL' }, { name: 'Algeria', code: 'DZ' }, { name: 'American Samoa', code: 'AS' }, { name: 'AndorrA', code: 'AD' }, { name: 'Angola', code: 'AO' }, { name: 'Anguilla', code: 'AI' }, { name: 'Antarctica', code: 'AQ' }, { name: 'Antigua and Barbuda', code: 'AG' }, { name: 'Argentina', code: 'AR' }, { name: 'Armenia', code: 'AM' }, { name: 'Aruba', code: 'AW' }, { name: 'Australia', code: 'AU' }, { name: 'Austria', code: 'AT' }, { name: 'Azerbaijan', code: 'AZ' }, { name: 'Bahamas', code: 'BS' }, { name: 'Bahrain', code: 'BH' }, { name: 'Bangladesh', code: 'BD' }, { name: 'Barbados', code: 'BB' }, { name: 'Belarus', code: 'BY' }, { name: 'Belgium', code: 'BE' }, { name: 'Belize', code: 'BZ' }, { name: 'Benin', code: 'BJ' }, { name: 'Bermuda', code: 'BM' }, { name: 'Bhutan', code: 'BT' }, { name: 'Bolivia', code: 'BO' }, { name: 'Bosnia and Herzegovina', code: 'BA' }, { name: 'Botswana', code: 'BW' }, { name: 'Bouvet Island', code: 'BV' }, { name: 'Brazil', code: 'BR' }, { name: 'British Indian Ocean Territory', code: 'IO' }, { name: 'Brunei Darussalam', code: 'BN' }, { name: 'Bulgaria', code: 'BG' }, { name: 'Burkina Faso', code: 'BF' }, { name: 'Burundi', code: 'BI' }, { name: 'Cambodia', code: 'KH' }, { name: 'Cameroon', code: 'CM' }, { name: 'Canada', code: 'CA' }, { name: 'Cape Verde', code: 'CV' }, { name: 'Cayman Islands', code: 'KY' }, { name: 'Central African Republic', code: 'CF' }, { name: 'Chad', code: 'TD' }, { name: 'Chile', code: 'CL' }, { name: 'China', code: 'CN' }, { name: 'Christmas Island', code: 'CX' }, { name: 'Cocos (Keeling) Islands', code: 'CC' }, { name: 'Colombia', code: 'CO' }, { name: 'Comoros', code: 'KM' }, { name: 'Congo', code: 'CG' }, { name: 'Congo, The Democratic Republic of the', code: 'CD' }, { name: 'Cook Islands', code: 'CK' }, { name: 'Costa Rica', code: 'CR' }, { name: 'Cote D\\'Ivoire', code: 'CI' }, { name: 'Croatia', code: 'HR' }, { name: 'Cuba', code: 'CU' }, { name: 'Cyprus', code: 'CY' }, { name: 'Czech Republic', code: 'CZ' }, { name: 'Denmark', code: 'DK' }, { name: 'Djibouti', code: 'DJ' }, { name: 'Dominica', code: 'DM' }, { name: 'Dominican Republic', code: 'DO' }, { name: 'Ecuador', code: 'EC' }, { name: 'Egypt', code: 'EG' }, { name: 'El Salvador', code: 'SV' }, { name: 'Equatorial Guinea', code: 'GQ' }, { name: 'Eritrea', code: 'ER' }, { name: 'Estonia', code: 'EE' }, { name: 'Ethiopia', code: 'ET' }, { name: 'Falkland Islands (Malvinas)', code: 'FK' }, { name: 'Faroe Islands', code: 'FO' }, { name: 'Fiji', code: 'FJ' }, { name: 'Finland', code: 'FI' }, { name: 'France', code: 'FR' }, { name: 'French Guiana', code: 'GF' }, { name: 'French Polynesia', code: 'PF' }, { name: 'French Southern Territories', code: 'TF' }, { name: 'Gabon', code: 'GA' }, { name: 'Gambia', code: 'GM' }, { name: 'Georgia', code: 'GE' }, { name: 'Germany', code: 'DE' }, { name: 'Ghana', code: 'GH' }, { name: 'Gibraltar', code: 'GI' }, { name: 'Greece', code: 'GR' }, { name: 'Greenland', code: 'GL' }, { name: 'Grenada', code: 'GD' }, { name: 'Guadeloupe', code: 'GP' }, { name: 'Guam', code: 'GU' }, { name: 'Guatemala', code: 'GT' }, { name: 'Guernsey', code: 'GG' }, { name: 'Guinea', code: 'GN' }, { name: 'Guinea-Bissau', code: 'GW' }, { name: 'Guyana', code: 'GY' }, { name: 'Haiti', code: 'HT' }, { name: 'Heard Island and Mcdonald Islands', code: 'HM' }, { name: 'Holy See (Vatican City State)', code: 'VA' }, { name: 'Honduras', code: 'HN' }, { name: 'Hong Kong', code: 'HK' }, { name: 'Hungary', code: 'HU' }, { name: 'Iceland', code: 'IS' }, { name: 'India', code: 'IN' }, { name: 'Indonesia', code: 'ID' }, { name: 'Iran, Islamic Republic Of', code: 'IR' }, { name: 'Iraq', code: 'IQ' }, { name: 'Ireland', code: 'IE' }, { name: 'Isle of Man', code: 'IM' }, { name: 'Israel', code: 'IL' }, { name: 'Italy', code: 'IT' }, { name: 'Jamaica', code: 'JM' }, { name: 'Japan', code: 'JP' }, { name: 'Jersey', code: 'JE' }, { name: 'Jordan', code: 'JO' }, { name: 'Kazakhstan', code: 'KZ' }, { name: 'Kenya', code: 'KE' }, { name: 'Kiribati', code: 'KI' }, { name: 'Korea, Democratic People\\'S Republic of', code: 'KP' }, { name: 'Korea, Republic of', code: 'KR' }, { name: 'Kuwait', code: 'KW' }, { name: 'Kyrgyzstan', code: 'KG' }, { name: 'Lao People\\'S Democratic Republic', code: 'LA' }, { name: 'Latvia', code: 'LV' }, { name: 'Lebanon', code: 'LB' }, { name: 'Lesotho', code: 'LS' }, { name: 'Liberia', code: 'LR' }, { name: 'Libyan Arab Jamahiriya', code: 'LY' }, { name: 'Liechtenstein', code: 'LI' }, { name: 'Lithuania', code: 'LT' }, { name: 'Luxembourg', code: 'LU' }, { name: 'Macao', code: 'MO' }, { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' }, { name: 'Madagascar', code: 'MG' }, { name: 'Malawi', code: 'MW' }, { name: 'Malaysia', code: 'MY' }, { name: 'Maldives', code: 'MV' }, { name: 'Mali', code: 'ML' }, { name: 'Malta', code: 'MT' }, { name: 'Marshall Islands', code: 'MH' }, { name: 'Martinique', code: 'MQ' }, { name: 'Mauritania', code: 'MR' }, { name: 'Mauritius', code: 'MU' }, { name: 'Mayotte', code: 'YT' }, { name: 'Mexico', code: 'MX' }, { name: 'Micronesia, Federated States of', code: 'FM' }, { name: 'Moldova, Republic of', code: 'MD' }, { name: 'Monaco', code: 'MC' }, { name: 'Mongolia', code: 'MN' }, { name: 'Montserrat', code: 'MS' }, { name: 'Morocco', code: 'MA' }, { name: 'Mozambique', code: 'MZ' }, { name: 'Myanmar', code: 'MM' }, { name: 'Namibia', code: 'NA' }, { name: 'Nauru', code: 'NR' }, { name: 'Nepal', code: 'NP' }, { name: 'Netherlands', code: 'NL' }, { name: 'Netherlands Antilles', code: 'AN' }, { name: 'New Caledonia', code: 'NC' }, { name: 'New Zealand', code: 'NZ' }, { name: 'Nicaragua', code: 'NI' }, { name: 'Niger', code: 'NE' }, { name: 'Nigeria', code: 'NG' }, { name: 'Niue', code: 'NU' }, { name: 'Norfolk Island', code: 'NF' }, { name: 'Northern Mariana Islands', code: 'MP' }, { name: 'Norway', code: 'NO' }, { name: 'Oman', code: 'OM' }, { name: 'Pakistan', code: 'PK' }, { name: 'Palau', code: 'PW' }, { name: 'Palestinian Territory, Occupied', code: 'PS' }, { name: 'Panama', code: 'PA' }, { name: 'Papua New Guinea', code: 'PG' }, { name: 'Paraguay', code: 'PY' }, { name: 'Peru', code: 'PE' }, { name: 'Philippines', code: 'PH' }, { name: 'Pitcairn', code: 'PN' }, { name: 'Poland', code: 'PL' }, { name: 'Portugal', code: 'PT' }, { name: 'Puerto Rico', code: 'PR' }, { name: 'Qatar', code: 'QA' }, { name: 'Reunion', code: 'RE' }, { name: 'Romania', code: 'RO' }, { name: 'Russian Federation', code: 'RU' }, { name: 'RWANDA', code: 'RW' }, { name: 'Saint Helena', code: 'SH' }, { name: 'Saint Kitts and Nevis', code: 'KN' }, { name: 'Saint Lucia', code: 'LC' }, { name: 'Saint Pierre and Miquelon', code: 'PM' }, { name: 'Saint Vincent and the Grenadines', code: 'VC' }, { name: 'Samoa', code: 'WS' }, { name: 'San Marino', code: 'SM' }, { name: 'Sao Tome and Principe', code: 'ST' }, { name: 'Saudi Arabia', code: 'SA' }, { name: 'Senegal', code: 'SN' }, { name: 'Serbia and Montenegro', code: 'CS' }, { name: 'Seychelles', code: 'SC' }, { name: 'Sierra Leone', code: 'SL' }, { name: 'Singapore', code: 'SG' }, { name: 'Slovakia', code: 'SK' }, { name: 'Slovenia', code: 'SI' }, { name: 'Solomon Islands', code: 'SB' }, { name: 'Somalia', code: 'SO' }, { name: 'South Africa', code: 'ZA' }, { name: 'South Georgia and the South Sandwich Islands', code: 'GS' }, { name: 'Spain', code: 'ES' }, { name: 'Sri Lanka', code: 'LK' }, { name: 'Sudan', code: 'SD' }, { name: 'Suriname', code: 'SR' }, { name: 'Svalbard and Jan Mayen', code: 'SJ' }, { name: 'Swaziland', code: 'SZ' }, { name: 'Sweden', code: 'SE' }, { name: 'Switzerland', code: 'CH' }, { name: 'Syrian Arab Republic', code: 'SY' }, { name: 'Taiwan, Province of China', code: 'TW' }, { name: 'Tajikistan', code: 'TJ' }, { name: 'Tanzania, United Republic of', code: 'TZ' }, { name: 'Thailand', code: 'TH' }, { name: 'Timor-Leste', code: 'TL' }, { name: 'Togo', code: 'TG' }, { name: 'Tokelau', code: 'TK' }, { name: 'Tonga', code: 'TO' }, { name: 'Trinidad and Tobago', code: 'TT' }, { name: 'Tunisia', code: 'TN' }, { name: 'Turkey', code: 'TR' }, { name: 'Turkmenistan', code: 'TM' }, { name: 'Turks and Caicos Islands', code: 'TC' }, { name: 'Tuvalu', code: 'TV' }, { name: 'Uganda', code: 'UG' }, { name: 'Ukraine', code: 'UA' }, { name: 'United Arab Emirates', code: 'AE' }, { name: 'United Kingdom', code: 'GB' }, { name: 'United States', code: 'US' }, { name: 'United States Minor Outlying Islands', code: 'UM' }, { name: 'Uruguay', code: 'UY' }, { name: 'Uzbekistan', code: 'UZ' }, { name: 'Vanuatu', code: 'VU' }, { name: 'Venezuela', code: 'VE' }, { name: 'Viet Nam', code: 'VN' }, { name: 'Virgin Islands, British', code: 'VG' }, { name: 'Virgin Islands, U.S.', code: 'VI' }, { name: 'Wallis and Futuna', code: 'WF' }, { name: 'Western Sahara', code: 'EH' }, { name: 'Yemen', code: 'YE' }, { name: 'Zambia', code: 'ZM' }, { name: 'Zimbabwe', code: 'ZW' }],\n\t\n\t    cities: {},\n\t\n\t    // @todo: single line object pairs so not to take so much size\n\t    states: [{\n\t      name: 'Alabama',\n\t      abbreviation: 'AL'\n\t    }, {\n\t      name: 'Alaska',\n\t      abbreviation: 'AK'\n\t    }, {\n\t      name: 'American Samoa',\n\t      abbreviation: 'AS'\n\t    }, {\n\t      name: 'Arizona',\n\t      abbreviation: 'AZ'\n\t    }, {\n\t      name: 'Arkansas',\n\t      abbreviation: 'AR'\n\t    }, {\n\t      name: 'California',\n\t      abbreviation: 'CA'\n\t    }, {\n\t      name: 'Colorado',\n\t      abbreviation: 'CO'\n\t    }, {\n\t      name: 'Connecticut',\n\t      abbreviation: 'CT'\n\t    }, {\n\t      name: 'Delaware',\n\t      abbreviation: 'DE'\n\t    }, {\n\t      name: 'District Of Columbia',\n\t      abbreviation: 'DC'\n\t    }, {\n\t      name: 'Federated States Of Micronesia',\n\t      abbreviation: 'FM'\n\t    }, {\n\t      name: 'Florida',\n\t      abbreviation: 'FL'\n\t    }, {\n\t      name: 'Georgia',\n\t      abbreviation: 'GA'\n\t    }, {\n\t      name: 'Guam',\n\t      abbreviation: 'GU'\n\t    }, {\n\t      name: 'Hawaii',\n\t      abbreviation: 'HI'\n\t    }, {\n\t      name: 'Idaho',\n\t      abbreviation: 'ID'\n\t    }, {\n\t      name: 'Illinois',\n\t      abbreviation: 'IL'\n\t    }, {\n\t      name: 'Indiana',\n\t      abbreviation: 'IN'\n\t    }, {\n\t      name: 'Iowa',\n\t      abbreviation: 'IA'\n\t    }, {\n\t      name: 'Kansas',\n\t      abbreviation: 'KS'\n\t    }, {\n\t      name: 'Kentucky',\n\t      abbreviation: 'KY'\n\t    }, {\n\t      name: 'Louisiana',\n\t      abbreviation: 'LA'\n\t    }, {\n\t      name: 'Maine',\n\t      abbreviation: 'ME'\n\t    }, {\n\t      name: 'Marshall Islands',\n\t      abbreviation: 'MH'\n\t    }, {\n\t      name: 'Maryland',\n\t      abbreviation: 'MD'\n\t    }, {\n\t      name: 'Massachusetts',\n\t      abbreviation: 'MA'\n\t    }, {\n\t      name: 'Michigan',\n\t      abbreviation: 'MI'\n\t    }, {\n\t      name: 'Minnesota',\n\t      abbreviation: 'MN'\n\t    }, {\n\t      name: 'Mississippi',\n\t      abbreviation: 'MS'\n\t    }, {\n\t      name: 'Missouri',\n\t      abbreviation: 'MO'\n\t    }, {\n\t      name: 'Montana',\n\t      abbreviation: 'MT'\n\t    }, {\n\t      name: 'Nebraska',\n\t      abbreviation: 'NE'\n\t    }, {\n\t      name: 'Nevada',\n\t      abbreviation: 'NV'\n\t    }, {\n\t      name: 'New Hampshire',\n\t      abbreviation: 'NH'\n\t    }, {\n\t      name: 'New Jersey',\n\t      abbreviation: 'NJ'\n\t    }, {\n\t      name: 'New Mexico',\n\t      abbreviation: 'NM'\n\t    }, {\n\t      name: 'New York',\n\t      abbreviation: 'NY'\n\t    }, {\n\t      name: 'North Carolina',\n\t      abbreviation: 'NC'\n\t    }, {\n\t      name: 'North Dakota',\n\t      abbreviation: 'ND'\n\t    }, {\n\t      name: 'Northern Mariana Islands',\n\t      abbreviation: 'MP'\n\t    }, {\n\t      name: 'Ohio',\n\t      abbreviation: 'OH'\n\t    }, {\n\t      name: 'Oklahoma',\n\t      abbreviation: 'OK'\n\t    }, {\n\t      name: 'Oregon',\n\t      abbreviation: 'OR'\n\t    }, {\n\t      name: 'Palau',\n\t      abbreviation: 'PW'\n\t    }, {\n\t      name: 'Pennsylvania',\n\t      abbreviation: 'PA'\n\t    }, {\n\t      name: 'Puerto Rico',\n\t      abbreviation: 'PR'\n\t    }, {\n\t      name: 'Rhode Island',\n\t      abbreviation: 'RI'\n\t    }, {\n\t      name: 'South Carolina',\n\t      abbreviation: 'SC'\n\t    }, {\n\t      name: 'South Dakota',\n\t      abbreviation: 'SD'\n\t    }, {\n\t      name: 'Tennessee',\n\t      abbreviation: 'TN'\n\t    }, {\n\t      name: 'Texas',\n\t      abbreviation: 'TX'\n\t    }, {\n\t      name: 'Utah',\n\t      abbreviation: 'UT'\n\t    }, {\n\t      name: 'Vermont',\n\t      abbreviation: 'VT'\n\t    }, {\n\t      name: 'Virgin Islands',\n\t      abbreviation: 'VI'\n\t    }, {\n\t      name: 'Virginia',\n\t      abbreviation: 'VA'\n\t    }, {\n\t      name: 'Washington',\n\t      abbreviation: 'WA'\n\t    }, {\n\t      name: 'West Virginia',\n\t      abbreviation: 'WV'\n\t    }, {\n\t      name: 'Wisconsin',\n\t      abbreviation: 'WI'\n\t    }, {\n\t      name: 'Wyoming',\n\t      abbreviation: 'WY'\n\t    }]\n\t  };\n\t\n\t  // Person / People\n\t  // ---------------\n\t\n\t  Fluke.prototype.nationality = function () {\n\t    var nationalities = ['Afghan', 'Albanian', 'Algerian', 'American', 'Andorran', 'Angolan', 'Antiguans', 'Argentinean', 'Armenian', 'Australian', 'Austrian', 'Azerbaijani', 'Bahamian', 'Bahraini', 'Bangladeshi', 'Barbadian', 'Barbudans', 'Batswana', 'Belarusian', 'Belgian', 'Belizean', 'Beninese', 'Bhutanese', 'Bolivian', 'Bosnian', 'Brazilian', 'British', 'Bruneian', 'Bulgarian', 'Burkinabe', 'Burmese', 'Burundian', 'Cambodian', 'Cameroonian', 'Canadian', 'Cape Verdean', 'Central African', 'Chadian', 'Chilean', 'Chinese', 'Colombian', 'Comoran', 'Congolese', 'Costa Rican', 'Croatian', 'Cuban', 'Cypriot', 'Czech', 'Danish', 'Djibouti', 'Dominican', 'Dutch', 'East Timorese', 'Ecuadorean', 'Egyptian', 'Emirian', 'Equatorial Guinean', 'Eritrean', 'Estonian', 'Ethiopian', 'Fijian', 'Filipino', 'Finnish', 'French', 'Gabonese', 'Gambian', 'Georgian', 'German', 'Ghanaian', 'Greek', 'Grenadian', 'Guatemalan', 'Guinea-Bissauan', 'Guinean', 'Guyanese', 'Haitian', 'Herzegovinian', 'Honduran', 'Hungarian', 'I-Kiribati', 'Icelander', 'Indian', 'Indonesian', 'Iranian', 'Iraqi', 'Irish', 'Israeli', 'Italian', 'Ivorian', 'Jamaican', 'Japanese', 'Jordanian', 'Kazakhstani', 'Kenyan', 'Kittian and Nevisian', 'Kuwaiti', 'Kyrgyz', 'Laotian', 'Latvian', 'Lebanese', 'Liberian', 'Libyan', 'Liechtensteiner', 'Lithuanian', 'Luxembourger', 'Macedonian', 'Malagasy', 'Malawian', 'Malaysian', 'Maldivan', 'Malian', 'Maltese', 'Marshallese', 'Mauritanian', 'Mauritian', 'Mexican', 'Micronesian', 'Moldovan', 'Monacan', 'Mongolian', 'Moroccan', 'Mosotho', 'Motswana', 'Mozambican', 'Namibian', 'Nauruan', 'Nepalese', 'New Zealander', 'Nicaraguan', 'Nigerian', 'Nigerien', 'North Korean', 'Northern Irish', 'Norwegian', 'Omani', 'Pakistani', 'Palauan', 'Panamanian', 'Papua New Guinean', 'Paraguayan', 'Peruvian', 'Polish', 'Portuguese', 'Qatari', 'Romanian', 'Russian', 'Rwandan', 'Saint Lucian', 'Salvadoran', 'Samoan', 'San Marinese', 'Sao Tomean', 'Saudi', 'Scottish', 'Senegalese', 'Serbian', 'Seychellois', 'Sierra Leonean', 'Singaporean', 'Slovakian', 'Slovenian', 'Solomon Islander', 'Somali', 'South African', 'South Korean', 'Spanish', 'Sri Lankan', 'Sudanese', 'Surinamer', 'Swazi', 'Swedish', 'Swiss', 'Syrian', 'Taiwanese', 'Tajik', 'Tanzanian', 'Thai', 'Togolese', 'Tongan', 'Trinidadian or Tobagonian', 'Tunisian', 'Turkish', 'Tuvaluan', 'Ugandan', 'Ukrainian', 'Uruguayan', 'Uzbekistani', 'Venezuelan', 'Vietnamese', 'Welsh', 'Yemenite', 'Zambian', 'Zimbabwean'];\n\t\n\t    var n = nationalities[Math.floor(this.random() * nationalities.length)];\n\t    return n;\n\t  };\n\t\n\t  Fluke.prototype.arab = function () {};\n\t\n\t  Fluke.prototype.forename = function () {};\n\t\n\t  Fluke.prototype.surnname = function () {};\n\t\n\t  Fluke.prototype.fullname = function () {};\n\t\n\t  Fluke.prototype.gender = function () {\n\t    var gArr = ['male', 'female'];\n\t\n\t    var a = gArr[Math.floor(this.random() * gArr.length)];\n\t    return a;\n\t  };\n\t\n\t  // Location\n\t  // -------------\n\t\n\t  Fluke.prototype.country = function () {};\n\t\n\t  // JSON\n\t  // -----------\n\t\n\t  // Currency\n\t  // -----------\n\t\n\t  /** ==> Dollar\n\t   *  Return a word\n\t   *  @param {number}\n\t   *  @param {number}\n\t   *  @throws {Error}\n\t   *  @returns {number}\n\t   */\n\t\n\t  Fluke.prototype.dollar = function (min, max) {\n\t    var finAlgorithm = this.random() * (max - min) + min;\n\t\n\t    if (arguments.length > 0) {\n\t      return dollarCurr + '' + finAlgorithm.toFixed(2);\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==> Ruble\n\t   *  Return a word\n\t   *  @param {number}\n\t   *  @param {number}\n\t   *  @throws {Error}\n\t   *  @returns {number}\n\t   */\n\t\n\t  Fluke.prototype.ruble = function (min, max) {\n\t    var finAlgorithm = this.random() * (max - min) + min;\n\t\n\t    if (arguments.length > 0) {\n\t      return russianCurr + '' + finAlgorithm.toFixed(2);\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==> Euro\n\t   *  Return a word\n\t   *  @param {number}\n\t   *  @param {number}\n\t   *  @throws {Error}\n\t   *  @returns {number}\n\t   */\n\t\n\t  Fluke.prototype.euro = function (min, max) {\n\t    var finAlgorithm = this.random() * (max - min) + min;\n\t\n\t    if (arguments.length > 0) {\n\t      return euroCurr + '' + finAlgorithm.toFixed(2);\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==> British Pound\n\t   *  Return a word\n\t   *  @param {number}\n\t   *  @param {number}\n\t   *  @throws {Error}\n\t   *  @returns {number}\n\t   */\n\t\n\t  Fluke.prototype.pound = function (min, max) {\n\t    var finAlgorithm = this.random() * (max - min) + min;\n\t\n\t    if (arguments.length > 0) {\n\t      return britishCurr + '' + finAlgorithm.toFixed(2);\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  /** ==>  Kuwaiti Dinar\n\t   *  Return a word\n\t   *  @param {number}\n\t   *  @param {number}\n\t   *  @throws {Error}\n\t   *  @returns {number}\n\t   */\n\t\n\t  Fluke.prototype.dinar = function (min, max) {\n\t    var finAlgorithm = this.random() * (max - min) + min;\n\t\n\t    if (arguments.length > 0) {\n\t      return kuwaitiCurr + '' + finAlgorithm.toFixed(2);\n\t    } else {\n\t      throw new Error('min and max should be supplied');\n\t    }\n\t  };\n\t\n\t  Fluke.prototype.nasdaq100 = function (min, max) {\n\t\n\t    var rawNasdaq = 'ATVI,ADBE,AKAM,ALXN,GOOG,GOOGL,AMZN,AAL,AMGN,ADI,AAPL,AMAT,ADSK,ADP,BIDU,BBBY,BIIB,BMRN,AVGO,CA,CELG,CERN,CHTR,CHKP,CSCO,CTXS,CTSH,CMCSA,COST,CSX,CTRP,DISCA,DISCK,DISH,DLTR,EBAY,EA,ENDP,EXPE,ESRX,FB,FAST,FISV,GILD,HSIC,ILMN,INCY,INTC,INTU,ISRG,JD,LRC,LBTYA,LBTYK,LVNTA,QVCA,LMCA,LMCK,BATRA,BATRK,LLTC,MAR,MAT,MXIM,MU,MSFT,MDLZ,MNST,MYL,NTAP,NTES,NFLX,NCLH,NVDA,NXPI,ORLY,PCAR,PAYX,PYPL,QCOM,REGN,ROST,SBAC,STX,SIRI,SWKS,SBUX,SRCL,SYMC,TMUS,TSLA,TXN,KHC,PCLN,TSCO,TRIP,FOX,FOXA,ULTA,VRSK,VRTX,VIAB,VOD,WBA,WDC,WFM,XLNX,YHOO';\n\t\n\t    var nasdaq = rawNasdaq.split(',');\n\t\n\t    function nasdaqList() {\n\t      return nasdaq[randInt(nasdaq.length)];\n\t    }\n\t\n\t    function randInt() {\n\t      return Math.floor(Math.random() * 62);\n\t    }\n\t\n\t    if (typeof options === 'undefined') {\n\t      return nasdaqList();\n\t    }\n\t  };\n\t\n\t  //// helper functions that iterate over objects\n\t  //for (var property in object) {\n\t  //  if (object.hasOwnProperty(property)) {\n\t  //      // do stuff\n\t  //  }\n\t  //}\n\t  //\n\t  //for (var key in data) {\n\t  //  console.log(data[key]);\n\t  //}\n\t\n\t  function showObject(obj) {\n\t    var result = '';\n\t    for (var prop in obj) {\n\t      if (obj.hasOwnProperty(prop)) {\n\t        result += prop + ' , ' + obj[prop];\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  console.log(showObject(data));\n\t\n\t  // On window\n\t  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && _typeof(window.document) === 'object') {\n\t    window.Fluke = Fluke;\n\t    window.fluke = new Fluke();\n\t  }\n\t\n\t  // Register as an anonymous AMD module\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t      return Fluke;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  }\n\t\n\t  // CommonJS module\n\t  if (true) {\n\t    if (typeof module !== 'undefined' && module.exports) {\n\t      exports = module.exports = Fluke;\n\t    }\n\t    exports.Fluke = Fluke;\n\t  }\n\t})();\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=fluke.js.map"],"sourceRoot":"/source/"}